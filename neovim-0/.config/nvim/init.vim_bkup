"# vim:foldmethod=marker
"#: vim-plug {{{
"#: Load VimPlug {{{
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
"#: }}}

"#: Pluging List {{{

call plug#begin('~/.vim/plugged')

"#: Looks {{{
" -----------------------------------------------
" Themes
Plug 'morhetz/gruvbox'
" File Browser
Plug 'scrooloose/nerdtree'
" Icon Themes
Plug 'ryanoasis/vim-devicons'
" Statusline
Plug 'itchyny/lightline.vim'

" -----------------------------------------------
"#: }}}

"#: Syntax & Programming Lenguage Related {{{
" -----------------------------------------------
" Shows a | symbol for code indentation
Plug 'Yggdroot/indentLine'
" Adds syntax for most common file extensions. 
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
" Syntax for I3WM
Plug 'mboughaba/i3config.vim'
" Cheat.sh	
Plug 'dbeniamine/cheat.sh-vim'
" -----------------------------------------------
"#: }}}

"#: Adding Functionallitty {{{
"------------------------------------------------
" Persisten session recorder
Plug 'mhinz/vim-startify'
" Fuzzy Finder
Plug 'junegunn/fzf.vim'
" Markdown Preview
Plug 'instant-markdown/vim-instant-markdown', {'for': 'markdown'}
" -----------------------------------------------
"#: }}} 

call plug#end()

"#: }}}
"#: }}}

"#:  Basics {{{
"------------------------------------------------
"Paste from other programs and other buffers
set clipboard=unnamed,unnamedplus
" Cannot remember where I got this from
setlocal conceallevel=3						
"Making Vim either more Vi-compatible.
set nocompatible						
"Activate filetype plugin
filetype plugin on
"Enable SyntaxHighlighting 
syntax enable       			
"SyntaxHighlighting always on
syntax on									
"Makes Vim hard tabs instead of soft ones (default: on)
set noexpandtab
"Like tabstop but only for soft tabs (default 0)
set softtabstop=0
"Sets the length that vim indents by (default 8)
set shiftwidth=2
"Changes displayed length of hard tabs in Vim only, should almost always be equal to shiftwidth (default 8)
set tabstop=2
"Use an encoding that supports unicode.
set encoding=utf-8					
"Tell exactly relative number in relation to current position
set number relativenumber
"Avoid wrapping a line in the middle of a word.
set linebreak
"Enable mouse for scrolling and re sizing.
set mouse=a
"Enable search highlighting.
set hlsearch
"Ignore case when searching.
set ignorecase
"Press Space to turn off highlighting
:nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>
"Highlight cursor position
set cursorline				
"Always display the status bar.
set laststatus=2
"Keeps 5 lines below and above the cursor 
"set scrolloff=5 						
"Enable line wrapping.
set wrap
"Fold based on indention levels.
"set foldmethod=indent
"Activates Folding
set foldenable	
"Activate vimrc marker folding
set foldmethod=marker
"Increase the undo limit.
set history=1000
"The shell used to execute commands.
set shell=/bin/zsh
"Disable spell check by default,use `set spell` command to load on demand!
set nospell
"Spell check language.
setlocal spelllang=en_us
"Spell file location
set spellfile=~/.vim/spell/en.utf-8.add
" Enable auto completion:
set wildmode=longest,list,full
" Disables automatic commenting on newline:
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
" Splits open at the bottom and right,unlike vim defaults.
set splitbelow splitright

"------------------------------------------------
"#: }}}

"#: Custom Options {{{

"#: Theme {{{
" themes names https://github.com/rafi/awesome-vim-colorschemes
"colorscheme molokai
autocmd vimenter * colorscheme gruvbox
autocmd vimenter * hi EndOfBuffer guibg=NONE ctermbg=NONE
set background=dark	"Setting dark or light mode
"hi Normal guibg=NONE ctermbg=NONE
hi Folded ctermbg=NONE guibg=NONE
hi FoldColumn ctermbg=NONE

"#: }}}

"#: Commands ran automatically on certain events {{{
augroup autos
	autocmd!

	" Set dosini syntax highlighting for config files
	autocmd BufRead,BufNewFile config setf dosini
	
	" Ensure all .js files are treated as javascript
	autocmd BufEnter *.js :setlocal filetype=javascript
	autocmd FileType typescript set noexpandtab
	
	" New files start in insert
	autocmd BufNewFile * start
	autocmd!
	autocmd BufWinEnter * silent! loadview
  
"	# WIKI 
" #autocmd BufWritePost /home/niko/Documents/wiki/diary/* silent X

augroup END
"#: }}}
"#: Press F4 to toggle highlighting on/off, and show current value. {{{
:noremap <F4> :set hlsearch! hlsearch?<CR>
"#: }}}
"#: Run xrdb whenever Xdefaults or Xresources are updated. {{{
	autocmd BufWritePost ~/.Xresources,~/.Xdefaults !xrdb %
"#: }}}
"#: I3 config syntax {{{
aug i3config_ft_detection
  au!
  au BufNewFile,BufRead ~/.config/i3/config set filetype=i3config
aug end
"#: }}}
"#: Pass Config {{{
" redact_pass.vim: Switch off the 'viminfo', 'backup', 'writebackup',
" 'swapfile', and 'undofile' globally when editing a password in pass(1).
"
" This is to prevent anyone being able to extract passwords from your Vim
" cache files in the event of a compromise.
"
" Author: Tom Ryder <tom@sanctum.geek.nz>
" License: Same as Vim itself
"
if exists('g:loaded_redact_pass') || &compatible
	  finish
endif
if !has('autocmd') || v:version < 600
	finish
endif
let g:loaded_redact_pass = 1
" Check whether we should set redacting options or not
function! s:CheckArgsRedact()
" Ensure there's one argument and it's the matched file
	if argc() != 1 || fnamemodify(argv(0), ':p') !=# expand('<afile>:p')
		return
	endif							  
" Disable all the leaky options globally
	set nobackup
	set nowritebackup
	set noswapfile
	set viminfo=
	if has('persistent_undo')
		set noundofile
	endif
" Tell the user what we're doing so they know this worked, via a message and
" a global variable they can check
	echomsg 'Editing password file--disabled leaky options!'
	let g:redact_pass_redacted = 1
endfunction
" Auto function loads only when Vim starts up
augroup redact_pass
	autocmd!
	autocmd VimEnter
				\ /dev/shm/pass.?*/?*.txt
				\,$TMPDIR/pass.?*/?*.txt
				\,/tmp/pass.?*/?*.txt
				\ call s:CheckArgsRedact()
augroup END
"# }}}

"#: }}}

"#: Custom Maps {{{

" Moving lines fast
map <S-j> 10j
map <S-k> 10k

" Short cutting split navigation, saving a keypress:
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
"Move between buffers                   
:nnoremap <C-n> :bnext<CR>  
:nnoremap <C-b> :bprevious<CR>
" Markdown preview
:nnoremap <C-p> :! glow % <C-r> %
" Commands
:command Today pu=strftime('%c')
"#:}}}

"#  Plugin Settigs {{{

"#:	Lightline {{{

function! CocCurrentFunction()
    return get(b:, 'coc_current_function', '')
endfunction

let g:lightline = {
			\'colorscheme': 'seoul256',
			\'active': {
			\'left': [ [ 'mode', 'paste' ],[ 'gitbranch', 'readonly', 'filename','modified' ] ],
			\'right': [	['lineinfo' ],[ 'percent' ],['cocstatus','currentfunction','fileencoding','filetype'] ],
			\},
			\'component_function': {
			\'gitbranch': 'FugitiveHead',
			\'cocstatus': 'coc#status',
			\'currentfunction': 'CocCurrentFunction'
			\}
			\}

"#: }}}

"#: FZF {{{
let $FZF_DEFAULT_COMMAND = 'fd --type f --exclude .git --follow --hidden'
" Keymaps
" Search
" Globally /
nnoremap <silent> <leader>f/ :Locate /<CR>
" Inside Home ~/
nnoremap <silent> <leader>ff :FZF ~<CR>
" Only in current directory
nnoremap <silent> <leader>fd :Files<CR>
" Only thru version controled files in current directory.
nnoremap <silent> <leader>fg :GFiles<CR>
" FZF Buffers
nnoremap <leader><space> :Buffers<CR>
" Ag search result (ALT-A to select all, ALT-D to deselect all)
nnoremap <leader>fs :Ag<CR>
" Any line loaded in curret buffers
nnoremap <leader>fc :Lines<CR>
" Command History
nnoremap <leader>fh :History:<CR>
" Full command List
nnoremap <leader>f: :Commands<CR>
"#:	}}}

"#:	Nerd tree {{{

map <C-t> :NERDTreeToggle<CR>
	autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" nerdTree highlight
let g:NERDTreeHighlightFolders = 1 " enables folder icon highlighting using exact match
let g:NERDTreeHighlightFoldersFullName = 1 " highlights the folder name
let g:NERDTreeChDirMode=2 "nerdtree and current directory
" you can add these colors to your .vimrc to help customizing
let s:brown = "905532"
let s:aqua =  "3AFFDB"
let s:blue = "689FB6"
let s:darkBlue = "44788E"
let s:purple = "834F79"
let s:lightPurple = "834F79"
let s:red = "AE403F"
let s:beige = "F5C06F"
let s:yellow = "F09F17"
let s:orange = "D4843E"
let s:darkOrange = "F16529"
let s:pink = "CB6F6F"
let s:salmon = "EE6E73"
let s:green = "8FAA54"
let s:lightGreen = "31B53E"
let s:white = "FFFFFF"
let s:rspec_red = 'FE405F'
let s:git_orange = 'F54D27'

let g:NERDTreeExtensionHighlightColor = {} " this line is needed to avoid error
let g:NERDTreeExtensionHighlightColor['css'] = s:blue " sets the color of css files to blue
let g:NERDTreeExactMatchHighlightColor = {} " this line is needed to avoid error
let g:NERDTreeExactMatchHighlightColor['.gitignore'] = s:git_orange " sets the color for .gitignore files
let g:NERDTreePatternMatchHighlightColor = {} " this line is needed to avoid error
let g:NERDTreePatternMatchHighlightColor['.*_spec\.rb$'] = s:rspec_red " sets the color for files ending with _spec.rb

"#:	}}}

"#: Instant Markdown {{{
"Uncomment to override defaults:
let g:instant_markdown_slow = 1
 let g:instant_markdown_browser = "firefox -p app"
let g:instant_markdown_autostart = 0
"let g:instant_markdown_open_to_the_world = 1
"let g:instant_markdown_allow_unsafe_content = 1
"let g:instant_markdown_allow_external_content = 0
"let g:instant_markdown_mathjax = 1
"let g:instant_markdown_mermaid = 1
let g:instant_markdown_logfile = '/tmp/instant_markdown.log'
"let g:instant_markdown_autoscroll = 0
"let g:instant_markdown_port = 8888
"let g:instant_markdown_python = 1
"#: }}}
"#:	}}}
